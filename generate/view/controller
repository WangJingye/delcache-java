package com.delcache.{{app}}.{{module}}.controller;

import com.delcache.{{app}}.common.BaseController;
import com.delcache.{{app}}.{{module}}.service.{{model}}Service;
import com.delcache.common.entity.{{model}};
import com.delcache.extend.Db;
import com.delcache.extend.Request;{{importAssign}}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

@Controller
public class {{model}}Controller extends BaseController {
    {{otherDefineService}}
    @Autowired
    {{model}}Service {{model}}Service;

    @RequestMapping(value = "{{module}}/{{modelRoute}}/index", method = RequestMethod.GET)
    public String index(HttpServletRequest request, Model model) {
        Map<String, Object> params = Request.getInstance(request).getParams();
        Map<String, Object> res = this.{{model}}Service.getList(params);
        model.addAttribute("list", res.get("list"));
        model.addAttribute("pagination", res.get("pagination"));
        model.addAttribute("params", params);{{otherAssign}}
        return this.render("{{module}}/{{modelRoute}}/index", model);
    }

    @RequestMapping(value = "{{module}}/{{modelRoute}}/edit", method = RequestMethod.GET)
    public String edit(HttpServletRequest request, Model model) throws Exception {
        String id = request.getParameter("id");
        model.addAttribute("title", "创建{{name}}");
        if (!StringUtils.isEmpty(id)) {
            {{model}} data = ({{model}}) Db.table({{model}}.class).where("{{primaryKey}}", id).find();
            if (data == null) {
                throw new Exception("参数有误");
            }
            model.addAttribute("data", data);
            model.addAttribute("title", "编辑{{name}} - " + data.get{{u_primaryKey}}());
        }{{otherAssign}}
        return this.render("{{module}}/{{modelRoute}}/edit", model);
    }

    @ResponseBody
    @RequestMapping(value = "{{module}}/{{modelRoute}}/edit", method = RequestMethod.POST)
    public Object edit(HttpServletRequest request) {
        try {
            Map<String, Object> params = Request.getInstance(request).getParams();
            {{model}} data;
            if (!StringUtils.isEmpty(params.get("id"))) {
                data = ({{model}}) Db.table({{model}}.class).where("{{primaryKey}}", params.get("id")).find();
                if (data == null) {
                    throw new Exception("参数有误");
                }
            } else {
                params.remove("id");
                data = new {{model}}();
            }{{parseFile}}
            data.load(params);
            Db.table({{model}}.class).save(data);
            return this.success("操作成功");
        } catch (Exception e) {
            return this.error(e.getMessage());
        }
    }
    
    @ResponseBody
    @RequestMapping(value = "{{module}}/{{modelRoute}}/delete", method = RequestMethod.POST)
    public Object delete(HttpServletRequest request) {
        try {
            String id = request.getParameter("id");
            if (StringUtils.isEmpty(id)) {
                throw new Exception("参数有误");
            }
            Db.table({{model}}.class).where("id",id).delete();
            return this.success("操作成功");
        } catch (Exception e) {
            return this.error(e.getMessage());
        }
    }{{statusAction}}
}